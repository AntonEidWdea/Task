@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f1f1f1;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start; /* علشان الكارت يبقى في أعلى الصفحة مش في النص */
            padding: 50px 0; /* مسافة من الأعلى والأسفل */
            overflow-y: auto; /* السماح بالتمرير */
        }

        .search-card {
            width: 1200px;
            max-width: 100%;
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            transition: all 0.3s ease-in-out;
        }

            .search-card:hover {
                transform: scale(1.02);
            }

        .table-container {
            margin-top: 20px;
            display: none;
        }
    </style>
</head>
<body>

    <div class="search-card" dir="ltr">
        <h4 class="mb-4 text-center text-primary">Search</h4>

        <form id="searchForm" class="row g-3">
            <div class="col-md-6">
                <label for="accountDropdown" class="form-label">Select Account</label>
                <input list="accountList" id="accountDropdown" name="account" class="form-control" placeholder="Search Account..." required>
                <datalist id="accountList">
                </datalist>
            </div>

            <div class="col-md-3">
                <label for="fromDate" class="form-label">From Date</label>
                <input type="date" id="fromDate" class="form-control" required>
            </div>

            <div class="col-md-3">
                <label for="toDate" class="form-label">To Date</label>
                <input type="date" id="toDate" class="form-control" required>
            </div>

            <div class="col-12 text-center mt-3">
                <button type="submit" class="btn btn-primary px-5">Search</button>
            </div>
            <div class="text-end mb-3">
                <button class="btn btn-success me-2" onclick="exportTableToExcel('resultBody', 'BalanceReport')">
                    Export Excel
                </button>
                <button class="btn btn-secondary" onclick="window.print()">🖨️ Print</button>
            </div>
        </form>
       
        <div class="table-container mt-4">
            <table class="table table-striped table-bordered text-center">
                <thead class="table-dark">
                    <tr>
                        <th>Account Code</th>
                        <th>Account Name</th>
                        <th>Account Type</th>
                        <th>Previous Balance</th>
                        <th>Debit Amount</th>
                        <th>Credit Amount</th>
                        <th>Final Balance</th>
                    </tr>
                </thead>
                <tbody id="resultBody">
                </tbody>
            </table>
           

        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
              document.addEventListener('DOMContentLoaded', async () => {
          try {
            // نداء API
            const response = await fetch('http://localhost:5166/api/Balance');
            const result = await response.json();

            // الوصول للمصفوفة داخل dto
            const accounts = result.dto || [];

            // تحديد العنصر datalist
            const dataList = document.getElementById('accountList');
            dataList.innerHTML = '';

            // إنشاء عناصر option لكل حساب
             accounts.forEach(acc => {
          const option = document.createElement('option');
          option.value = acc.id; // القيمة الفعلية
          option.textContent = `${acc.accountCode} - ${acc.accountName}`; // العرض للمستخدم
          dataList.appendChild(option);
        });

            console.log('Accounts loaded:', accounts.length);
          } catch (error) {
            console.error('Error fetching accounts:', error);
          }
        });
        document.getElementById('searchForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const account = document.getElementById('accountDropdown').value.trim();
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;

            if (!account || !fromDate || !toDate) {
                alert('Must Insert Data');
                return;
            }

                  const formattedFromDate = new Date(fromDate).toLocaleDateString('en-GB').replace(/\//g, '-');
        const formattedToDate = new Date(toDate).toLocaleDateString('en-GB').replace(/\//g, '-');
        console.log("aaaaaaaaaa");
        const apiUrl = `http://localhost:5166/api/BalanceHistory?Id=${account}&DateFrom=${formattedFromDate}&DateTo=${formattedToDate}`;
        console.log("bbbbbbb");


        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                const tbody = document.getElementById("resultBody");
                tbody.innerHTML = "";
        console.log(data.dto);

                if (data.dto && data.dto.length > 0) {
                    data.dto.forEach(item => {
                        const row = `
                            <tr>
                                <td>${item.accountCode}</td>
                                <td>${item.accountName}</td>
                                <td>${item.accountType}</td>
                                <td>${item.prev_Balance}</td>
                                <td>${item.debit}</td>
                                <td>${item.credit}</td>
                                <td>${item.finalBalance}</td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });
                } else {
                    tbody.innerHTML = `<tr><td colspan="7">No data found</td></tr>`;
                }
            })
            .catch(error => {
                console.error("❌ Error fetching data:", error);
                document.getElementById("resultBody").innerHTML = `<tr><td colspan="7">Error loading data</td></tr>`;
            });

            document.querySelector('.table-container').style.display = 'block';
        });
                function exportTableToExcel(tableId, filename = ''){
            const table = document.querySelector(`#${tableId}`).closest('table');
            const wb = XLSX.utils.table_to_book(table, { sheet: "Sheet1" });
            XLSX.writeFile(wb, `${filename || 'Report'}.xlsx`);
        }

    </script>

</body>
</html>
